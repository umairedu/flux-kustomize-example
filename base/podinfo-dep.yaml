---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: flask
  namespace: default
  labels:
    name: flask
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: flask
        team: devops
        version: 1.0.4
      annotations:
       prometheus.io/port: "5000"
       prometheus.io/scrape: "true"
       prometheus.io/path: "/metrics"
    spec:
      containers:
      - name  : flask-container
        ports:
        - containerPort: 5000
        readinessProbe:
          httpGet:
            path: /books
            port: 5000
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: /books
            port: 5000
          initialDelaySeconds: 15
          timeoutSeconds: 1
          periodSeconds: 15
        image: umairedu/flask:v4
        imagePullPolicy: Always
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
        - name: FLASK_ENV 
          valueFrom:
            configMapKeyRef:
              key: FLASK_ENV
              name: default-configmap
        - name: DATABASE_NAME 
          valueFrom:
            configMapKeyRef:
              key: DATABASE_NAME
              name: default-configmap
        - name: DATABASE_URI 
          valueFrom:
            configMapKeyRef:
              key: DATABASE_URI
              name: default-configmap
        - name: APP_VERSION 
          valueFrom:
            configMapKeyRef:
              key: APP_VERSION
              name: default-configmap
        - name: APP_SETTINGS
          valueFrom:
            configMapKeyRef:
              key: FLASK_APP_SETTINGS
              name: default-configmap
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
      restartPolicy: Always